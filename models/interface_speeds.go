// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InterfaceSpeeds interface speeds
//
// swagger:model InterfaceSpeeds
type InterfaceSpeeds struct {

	// capacities
	Capacities Capacities1 `json:"capacities,omitempty"`

	// speed
	// Example: auto
	// Enum: [auto autodetect 10-half 10-full 100-half 100-full 300-full 1000-half 1000-full 2500-full 10000-full]
	Speed string `json:"speed,omitempty"`
}

// Validate validates this interface speeds
func (m *InterfaceSpeeds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceSpeeds) validateCapacities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacities) { // not required
		return nil
	}

	if err := m.Capacities.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacities")
		}
		return err
	}

	return nil
}

var interfaceSpeedsTypeSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","autodetect","10-half","10-full","100-half","100-full","300-full","1000-half","1000-full","2500-full","10000-full"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceSpeedsTypeSpeedPropEnum = append(interfaceSpeedsTypeSpeedPropEnum, v)
	}
}

const (

	// InterfaceSpeedsSpeedAuto captures enum value "auto"
	InterfaceSpeedsSpeedAuto string = "auto"

	// InterfaceSpeedsSpeedAutodetect captures enum value "autodetect"
	InterfaceSpeedsSpeedAutodetect string = "autodetect"

	// InterfaceSpeedsSpeedNr10DashHalf captures enum value "10-half"
	InterfaceSpeedsSpeedNr10DashHalf string = "10-half"

	// InterfaceSpeedsSpeedNr10DashFull captures enum value "10-full"
	InterfaceSpeedsSpeedNr10DashFull string = "10-full"

	// InterfaceSpeedsSpeedNr100DashHalf captures enum value "100-half"
	InterfaceSpeedsSpeedNr100DashHalf string = "100-half"

	// InterfaceSpeedsSpeedNr100DashFull captures enum value "100-full"
	InterfaceSpeedsSpeedNr100DashFull string = "100-full"

	// InterfaceSpeedsSpeedNr300DashFull captures enum value "300-full"
	InterfaceSpeedsSpeedNr300DashFull string = "300-full"

	// InterfaceSpeedsSpeedNr1000DashHalf captures enum value "1000-half"
	InterfaceSpeedsSpeedNr1000DashHalf string = "1000-half"

	// InterfaceSpeedsSpeedNr1000DashFull captures enum value "1000-full"
	InterfaceSpeedsSpeedNr1000DashFull string = "1000-full"

	// InterfaceSpeedsSpeedNr2500DashFull captures enum value "2500-full"
	InterfaceSpeedsSpeedNr2500DashFull string = "2500-full"

	// InterfaceSpeedsSpeedNr10000DashFull captures enum value "10000-full"
	InterfaceSpeedsSpeedNr10000DashFull string = "10000-full"
)

// prop value enum
func (m *InterfaceSpeeds) validateSpeedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceSpeedsTypeSpeedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceSpeeds) validateSpeed(formats strfmt.Registry) error {
	if swag.IsZero(m.Speed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSpeedEnum("speed", "body", m.Speed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this interface speeds based on the context it is used
func (m *InterfaceSpeeds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapacities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceSpeeds) contextValidateCapacities(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Capacities.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacities")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceSpeeds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceSpeeds) UnmarshalBinary(b []byte) error {
	var res InterfaceSpeeds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
