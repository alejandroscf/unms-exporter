// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Firmware firmware
//
// swagger:model Firmware
type Firmware struct {

	// date
	// Minimum: 0
	Date *int64 `json:"date,omitempty"`

	// identification
	Identification *FirmwareIdentification `json:"identification,omitempty"`

	// semver
	Semver *FirmwareSemVer `json:"semver,omitempty"`

	// size
	Size float64 `json:"size,omitempty"`

	// supports
	Supports *FirmwareSupport `json:"supports,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this firmware
func (m *Firmware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSemver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupports(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Firmware) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.MinimumInt("date", "body", *m.Date, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Firmware) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if m.Identification != nil {
		if err := m.Identification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identification")
			}
			return err
		}
	}

	return nil
}

func (m *Firmware) validateSemver(formats strfmt.Registry) error {
	if swag.IsZero(m.Semver) { // not required
		return nil
	}

	if m.Semver != nil {
		if err := m.Semver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("semver")
			}
			return err
		}
	}

	return nil
}

func (m *Firmware) validateSupports(formats strfmt.Registry) error {
	if swag.IsZero(m.Supports) { // not required
		return nil
	}

	if m.Supports != nil {
		if err := m.Supports.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supports")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this firmware based on the context it is used
func (m *Firmware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIdentification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSemver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Firmware) contextValidateIdentification(ctx context.Context, formats strfmt.Registry) error {

	if m.Identification != nil {
		if err := m.Identification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identification")
			}
			return err
		}
	}

	return nil
}

func (m *Firmware) contextValidateSemver(ctx context.Context, formats strfmt.Registry) error {

	if m.Semver != nil {
		if err := m.Semver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("semver")
			}
			return err
		}
	}

	return nil
}

func (m *Firmware) contextValidateSupports(ctx context.Context, formats strfmt.Registry) error {

	if m.Supports != nil {
		if err := m.Supports.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supports")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Firmware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Firmware) UnmarshalBinary(b []byte) error {
	var res Firmware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
